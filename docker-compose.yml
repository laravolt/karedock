version: "3.3"

networks:
    frontend:
        driver: ${NETWORKS_DRIVER}
    backend:
        driver: ${NETWORKS_DRIVER}

volumes:
    mysql:
        driver: ${VOLUMES_DRIVER}
    postgres:
        driver: ${VOLUMES_DRIVER}
    redis:
        driver: ${VOLUMES_DRIVER}
    mariadb:
        driver: ${VOLUMES_DRIVER}
    mongo:
        driver: ${VOLUMES_DRIVER}
    minio:
        driver: ${VOLUMES_DRIVER}
    camunda:
        driver: ${VOLUMES_DRIVER}
    metabase:
        driver: ${VOLUMES_DRIVER}

services:
    ### MySQL ################################################
    mysql:
        build:
            context: ./mysql
            args:
                - MYSQL_VERSION=${MYSQL_VERSION}
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - TZ=${TIMEZONE}
        volumes:
            - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
            - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        ports:
            - "${MYSQL_PORT}:3306"
        networks:
            - backend

    ### PostgreSQL ###########################################
    postgres:
        build:
            context: ./postgres
            args:
                - POSTGRES_VERSION=${POSTGRES_VERSION}
        volumes:
            - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
            - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        ports:
            - "${POSTGRES_PORT}:5432"
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - CAMUNDA_POSTGRES_INIT=${CAMUNDA_POSTGRES_INIT}
            - CAMUNDA_POSTGRES_DB=${CAMUNDA_POSTGRES_DB}
            - CAMUNDA_POSTGRES_USER=${CAMUNDA_POSTGRES_USER}
            - CAMUNDA_POSTGRES_PASSWORD=${CAMUNDA_POSTGRES_PASSWORD}
            - METABASE_POSTGRES_INIT=${METABASE_POSTGRES_INIT}
            - METABASE_POSTGRES_DB=${METABASE_POSTGRES_DB}
            - METABASE_POSTGRES_USER=${METABASE_POSTGRES_USER}
            - METABASE_POSTGRES_PASSWORD=${METABASE_POSTGRES_PASSWORD}
        networks:
            - backend

    ### Redis ################################################
    redis:
        build: ./redis
        volumes:
            - ${DATA_PATH_HOST}/redis:/data
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - backend

    ### MariaDB ##############################################
    mariadb:
        build:
            context: ./mariadb
            args:
                - http_proxy
                - https_proxy
                - no_proxy
                - MARIADB_VERSION=${MARIADB_VERSION}
        volumes:
            - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
            - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        ports:
            - "${MARIADB_PORT}:3306"
        environment:
            - TZ=${TIMEZONE}
            - MYSQL_DATABASE=${MARIADB_DATABASE}
            - MYSQL_USER=${MARIADB_USER}
            - MYSQL_PASSWORD=${MARIADB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
        networks:
            - backend

    ### MongoDB ##############################################
    mongo:
        build: ./mongo
        ports:
            - "${MONGODB_PORT}:27017"
        volumes:
            - ${DATA_PATH_HOST}/mongo:/data/db
            - ${DATA_PATH_HOST}/mongo_config:/data/configdb
        networks:
            - backend

    ### MinIO ################################################
    minio:
        build: ./minio
        volumes:
            - ${DATA_PATH_HOST}/minio/data:/export
            - ${DATA_PATH_HOST}/minio/config:/root/.minio
        ports:
            - "${MINIO_PORT}:9000"
        environment:
            - MINIO_ACCESS_KEY=access
            - MINIO_SECRET_KEY=secretkey
        networks:
            - frontend
            - backend

    ### Camunda ##############################################
    camunda:
        image: camunda/camunda-bpm-platform:${CAMUNDA_VERSION}
        depends_on:
            - postgres
        environment:
            - DB_DRIVER=org.postgresql.Driver
            - DB_URL=jdbc:postgresql://postgres:5432/${CAMUNDA_POSTGRES_DB}
            - DB_USERNAME=${CAMUNDA_POSTGRES_USER}
            - DB_PASSWORD=${CAMUNDA_POSTGRES_PASSWORD}
            - WAIT_FOR=postgres:5432
            - TZ=${TIMEZONE}
        volumes:
            - ${DATA_PATH_HOST}/camunda:/camunda
        ports:
            - 8051:8080
        networks:
            - frontend
            - backend

    ### Metabase #############################################
    metabase:
        image: metabase/metabase:${METABASE_VERSION}
        depends_on:
            - postgres
        environment:
            - MB_DB_FILE=/metabase-data/${METABASE_DB_FILE}
            - JAVA_TIMEZONE=${TIMEZONE}
            - MB_DB_TYPE=postgres
            - MB_DB_DBNAME=${METABASE_POSTGRES_DB}
            - MB_DB_PORT=5432
            - MB_DB_USER=${METABASE_POSTGRES_USER}
            - MB_DB_PASS=${METABASE_POSTGRES_PASSWORD}
            - MB_DB_HOST=postgres
        ports:
            - ${METABASE_PORT}:3000
        volumes:
            - ${DATA_PATH_HOST}/metabase-data:/metabase-data
        networks:
            - backend
